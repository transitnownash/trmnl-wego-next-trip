{% comment %} https://gtfs.transitnownash.org/stops/{{ stop_id }}.json {% endcomment %}
{% assign stop = IDX_0 %}
{% comment %} https://gtfs.transitnownash.org/stops/{{ stop_id }}/trips.json?per_page=200 {% endcomment %}
{% assign trips = IDX_1.data %}
{% comment %} https://gtfs.transitnownash.org/routes.json {% endcomment %}
{% assign routes = IDX_2.data %}
{% comment %} https://gtfs.transitnownash.org/realtime/vehicle_positions.json {% endcomment %}
{% assign vehicle_positions = IDX_3.data %}
{% comment %} https://gtfs.transitnownash.org/realtime/trip_updates.json {% endcomment %}
{% assign trip_updates = IDX_4.data %}
{% comment %} https://gtfs.transitnownash.org/realtime/alerts.json {% endcomment %}
{% assign alerts = IDX_5.data %}

{%- capture bus_svg %}
<svg width="100%" height="100%" viewBox="0 0 512 512" version="1.1" xmlns="http://www.w3.org/2000/svg" style="fill-rule:evenodd;clip-rule:evenodd;">
    <g transform="matrix(21.3333,0,0,21.3333,0,10.6667)">
        <path d="M4,16C4,16.88 4.39,17.67 5,18.22L5,20C5,20.55 5.45,21 6,21L7,21C7.55,21 8,20.55 8,20L8,19L16,19L16,20C16,20.55 16.45,21 17,21L18,21C18.55,21 19,20.55 19,20L19,18.22C19.61,17.67 20,16.88 20,16L20,6C20,2.5 16.42,2 12,2C7.58,2 4,2.5 4,6L4,16Z" style="fill:rgb(249,249,249);fill-rule:nonzero;stroke:white;stroke-width:3px;"/>
    </g>
    <g transform="matrix(21.3333,0,0,21.3333,0,10.6667)">
        <path d="M4,16C4,16.88 4.39,17.67 5,18.22L5,20C5,20.55 5.45,21 6,21L7,21C7.55,21 8,20.55 8,20L8,19L16,19L16,20C16,20.55 16.45,21 17,21L18,21C18.55,21 19,20.55 19,20L19,18.22C19.61,17.67 20,16.88 20,16L20,6C20,2.5 16.42,2 12,2C7.58,2 4,2.5 4,6L4,16ZM7.5,17C6.67,17 6,16.33 6,15.5C6,14.67 6.67,14 7.5,14C8.33,14 9,14.67 9,15.5C9,16.33 8.33,17 7.5,17ZM16.5,17C15.67,17 15,16.33 15,15.5C15,14.67 15.67,14 16.5,14C17.33,14 18,14.67 18,15.5C18,16.33 17.33,17 16.5,17ZM18,11L6,11L6,6L18,6L18,11Z" style="fill:rgb(128,0,128);fill-rule:nonzero;"/>
    </g>
    <g transform="matrix(21.3333,0,0,21.3333,0,0)">
        <g transform="matrix(1,0,0,1,0,0.5)">
            <rect x="9.609" y="12.157" width="1.364" height="1.378" style="fill:white;"/>
        </g>
        <g transform="matrix(1,0,0,1,0,0.5)">
            <rect x="11.442" y="12.157" width="1.364" height="1.378" style="fill:white;"/>
        </g>
        <g transform="matrix(1,0,0,1,0,0.5)">
            <rect x="13.246" y="12.157" width="1.364" height="1.378" style="fill:white;"/>
        </g>
        <g transform="matrix(1,0,0,1,0,0.5)">
            <circle cx="11.157" cy="14.613" r="0.741" style="fill:white;"/>
        </g>
        <g transform="matrix(1,0,0,1,0,0.5)">
            <circle cx="13.092" cy="14.613" r="0.741" style="fill:white;"/>
        </g>
    </g>
</svg>
{%- endcapture %}

{% template alert %}
<div class="item gap--small" data-sort="{{ alert.alert.informed_entity.first.route_id | default: 99999 }}">
  <div class="title text--white bg--black text--center w--10 flex--center-y">
    <span class="text--white">{{ alert.alert.informed_entity.first.route_id }}</span>
  </div>
  <div class="content">
    <div><span class="label label--small">{{ alert.alert.header_text.translation.first.text }}</span></div>
    <div class="flex gap--small">
      <span class="label label--small label--outline">{{ alert.alert.cause }}, {{ alert.alert.effect }}</span>
      {% if alert.alert.active_period.first.end < 32503701600 %}
      <span class="label label--small label--outline">{{ alert.alert.active_period.first.start | date: '%-m/%-d' }} thru {{ alert.alert.active_period.first.end | date: '%-m/%-d' }}</span>
      {% else %}
      <span class="label label--small label--outline">Start: {{ alert.alert.active_period.first.start | date: '%-m/%-d' }}</span>
      {% endif %}
      </span>
    </div>
  </div>
</div>
{% endtemplate %}

<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
  crossorigin="" />
<script
  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
  crossorigin=""></script>
<script src="https://unpkg.com/dayjs@1.11.10/dayjs.min.js"></script>
<script src="https://unpkg.com/dayjs@1.11.10/plugin/utc.js"></script>
<script src="https://unpkg.com/dayjs@1.11.10/plugin/timezone.js"></script>
<script>
  dayjs.extend(dayjs_plugin_utc);
  dayjs.extend(dayjs_plugin_timezone);
</script>

<style>
  #wego-map-canvas {
    border-radius: 10px;
  }
  .leaflet-tile-loaded {
    opacity: 0.1;
    filter: grayscale(1.0);
  }
</style>

<script>
  const CURRENT_TIME = {{ trmnl.system.timestamp_utc | json }};
  const TIME_ZONE = {{ trmnl.user.time_zone_iana | default: 'America/Chicago' | json }};
  const BUS_MARKER_IMAGE = 'data:image/svg+xml;base64,{{ bus_svg | base64_encode }}';
  const THUNDERFOREST_API_KEY = {{ trmnl.plugin_settings.custom_fields_values.thunderforest_api_key | json }};

  // https://gtfs.transitnownash.org/stops/{{ stop_id }}.json
  const STOP = {{ stop | json }};
  // https://gtfs.transitnownash.org/stops/{{ stop_id }}/trips.json?per_page=200
  const TRIPS = {{ trips | json }};
  // https://gtfs.transitnownash.org/routes.json
  const ROUTES = {{ routes | json }};
  // https://gtfs.transitnownash.org/realtime/vehicle_positions.json
  const VEHICLE_POSITIONS = {{ vehicle_positions | json }};
  // https://gtfs.transitnownash.org/realtime/trip_updates.json
  const TRIP_UPDATES = {{ trip_updates | json }};
  // https://gtfs.transitnownash.org/realtime/alerts.json
  const ALERTS = {{ alerts | json }};

  // Use CURRENT_TIME as the baseline for "now" (in UTC)
  const BASE_NOW = dayjs.unix(CURRENT_TIME).tz(TIME_ZONE);

  /**
   * Parse Time (handles HH >= 24 for GTFS, always in local stop time zone)
   */
  const parseTime = (timeStr) => {
    if (!timeStr) return null;
    const parts = timeStr.trim().split(":");
    if (parts.length !== 3) return null;

    let hours = parseInt(parts[0], 10);
    const minutes = parseInt(parts[1], 10);
    const seconds = parseInt(parts[2], 10);

    // GTFS times can be over 24:00:00
    const daysToAdd = Math.floor(hours / 24);
    hours = hours % 24;

    // Use BASE_NOW as the reference date in the correct time zone
    const base = BASE_NOW.add(daysToAdd, 'day');
    // Construct the time in the stop's local time zone
    return dayjs.tz(
      `${base.format('YYYY-MM-DD')}T${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`,
      TIME_ZONE
    );
  };

  /**
   * Find Next Departure Time
   */
  const findNextDepartureTime = (stopTimes) => {
    if (!Array.isArray(stopTimes)) return null;
    for (const st of stopTimes) {
      const depTime = parseTime(st.departure_time);
      if (depTime && depTime.isAfter(BASE_NOW)) {
        return depTime;
      }
    }
    return null;
  };

  /**
   * Find Next Trip
   */
  const findNextTrip = (trips) => {
    if (!Array.isArray(trips) || trips.length === 0) return null;
    let soonestTrip = null;
    let soonestTime = null;

    for (const trip of trips) {
      if (!trip.stop_times?.length) continue;
      const depTime = findNextDepartureTime(trip.stop_times);
      if (depTime && (!soonestTime || depTime < soonestTime)) {
        soonestTrip = trip;
        soonestTime = depTime;
      }
    }
    return soonestTrip;
  };

  /**
   * Format Time
   */
  const formatTime = (date) => {
    if (!date) return '';
    return date.tz(TIME_ZONE).format('h:mm A');
  };

  /**
   * Get Time Until
   */
  const getTimeUntil = (futureDate) => {
    if (!futureDate) return '';
    if (!futureDate.isAfter(BASE_NOW)) return '';
    const diffMin = futureDate.diff(BASE_NOW, 'minute');
    const diffSec = futureDate.diff(BASE_NOW, 'second') % 60;
    return diffMin > 0 ? `${diffMin} min` : `${diffSec} sec`;
  };

  /**
   * Find Next Trip Update (handles GTFS-RT epoch seconds)
   */
  const findUpdatedNextDepartureTime = (nextTrip, stop, tripUpdates) => {
    if (!nextTrip || !stop || !Array.isArray(tripUpdates)) return null;
    const updatedTrip = tripUpdates.find((tu) => parseInt(tu.trip_update.trip.trip_id, 10) === parseInt(nextTrip.trip_gid, 10));
    const updatedStopTime = updatedTrip?.trip_update.stop_time_update.find((ut) => ut.stop_id === stop.stop_gid);
    const updateTime = updatedStopTime?.departure?.time;
    if (!updateTime) return null;
    return dayjs.unix(updateTime).tz(TIME_ZONE);
  };

  /**
   * Format Delay (use ms for both, then convert to seconds)
   */
  const formatDelay = (scheduled, realtime) => {
    if (!scheduled || !realtime) return 'scheduled';
    const diffSec = realtime.unix() - scheduled.unix();
    if (Math.abs(diffSec) < 60) return 'on time';
    const min = Math.round(Math.abs(diffSec) / 60);
    return diffSec > 0 ? `${min} min late` : `${min} min early`;
  }

  /**
   * Create Route Line
   */
  const createRouteLine = (shape, color, weight) => {
    const formattedShapePoints = shape.points.map((s) => {
      return [s.lat, s.lon];
    })

    return L.polyline(formattedShapePoints, { smooth: true, color, weight });
  }

  /**
   * Get Upcoming Departures for Stop (excluding current next trip)
   * Returns array of { trip, scheduled, updated, effectiveTime }
   * Improved: checks all stop_times for each trip, includes if either scheduled or updated is after BASE_NOW
   */
  const getUpcomingDeparturesForStop = (trips, stop, tripUpdates, excludeTripGid, count = 2) => {
    const departures = [];
    const stopGidToMatch = stop.stop_gid;
    trips.forEach(trip => {
      if (!Array.isArray(trip.stop_times)) return;
      trip.stop_times.forEach(st => {
        if (st.stop_gid != stopGidToMatch) return;
        const scheduled = parseTime(st.departure_time);
        const updated = findUpdatedNextDepartureTime(trip, { stop_id: st.stop_id }, tripUpdates);
        let effectiveTime = null;
        if (updated && scheduled) {
          effectiveTime = updated.isAfter(scheduled) ? updated : scheduled;
        } else if (updated) {
          effectiveTime = updated;
        } else if (scheduled) {
          effectiveTime = scheduled;
        }
        if (
          effectiveTime &&
          effectiveTime.isAfter(BASE_NOW) &&
          String(trip.trip_gid) !== String(excludeTripGid)
        ) {
          const route = ROUTES.find((r) => r.route_gid === trip.route_gid);
          departures.push({ trip, route, scheduled, updated, effectiveTime });
        }
      });
    });
    departures.sort((a, b) => a.effectiveTime.unix() - b.effectiveTime.unix());
    return departures.slice(0, count);
  };

  const formatFutureTrip = (dep) => {
    return `<div class="label label--small py--1"><b>${formatTime(dep.updated || dep.scheduled)}</b>: ${dep.route.route_short_name} - ${dep.route.route_long_name}</div>`;
  };

  /**
   * Sort alerts by data-sort attribute
   */
  const sortAlertsByDataSort = () => {
    const containers = document.querySelectorAll('.column[data-list-limit="true"]');
    containers.forEach(container => {
      const alertItems = Array.from(container.querySelectorAll('.item[data-sort]'));
      if (alertItems.length <= 1) return;

      // Sort by data-sort value (numeric)
      alertItems.sort((a, b) => {
        const sortA = parseInt(a.getAttribute('data-sort') || '99999', 10);
        const sortB = parseInt(b.getAttribute('data-sort') || '99999', 10);
        return sortA - sortB;
      });

      // Re-append in sorted order
      alertItems.forEach(item => container.appendChild(item));
    });
  };

  /**
   * Process and Display Alerts (show only the first relevant alert)
   */
  const processAlerts = (alerts, routeId, stopId) => {
    const alertsList = document.getElementById('alerts-list');
    if (!alertsList || !Array.isArray(alerts)) return;

    // Find the first relevant alert
    const nowUnix = dayjs().unix();
    const foundAlert = alerts.find(alert => {
      if (!alert.alert) return false;
      // Check if alert is active
      const isActive = Array.isArray(alert.alert.active_period) && alert.alert.active_period.some(period => {
        return period.start && period.start <= nowUnix && (!period.end || period.end > nowUnix);
      });
      if (!isActive) return false;
      // Check if alert applies to this route or stop
      const informed = alert.alert.informed_entity || [];
      const appliesToRoute = informed.some(entity => entity.route_id && String(entity.route_id) === String(routeId));
      const appliesToStop = informed.some(entity => entity.stop_id && String(entity.stop_id) === String(stopId));
      return appliesToRoute || appliesToStop;
    });

    if (!foundAlert) {
      alertsList.style.display = 'none';
      return;
    }
    alertsList.style.display = 'block';
    alertsList.innerHTML = `
      <div class="bg--black text--white p--2 mb--2" style="display: flex; align-items: flex-start;">
        <div style="flex: 0 0 28px; display: flex; align-items: center; justify-content: center; height: 100%;">
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <polygon points="10,2 19,18 1,18" fill="white" stroke="#222" stroke-width="1.5"/>
            <text x="10" y="15" text-anchor="middle" font-size="13" font-family="Arial, sans-serif" fill="#222" font-weight="bold">!</text>
          </svg>
        </div>
        <div style="flex: 1 1 0; min-width: 0; margin-left: 0.75em;">
          <div class="title title--small clamp--2" style="word-break: break-word;">${foundAlert.alert.header_text?.translation?.[0]?.text || 'Service Alert'}</div>
          <div class="description clamp--2" style="word-break: break-word;">
            ${foundAlert.alert.description_text?.translation?.[0]?.text || 'No description available'}
          </div>
        </div>
      </div>
    `;
  };

  /**
   * Main Loop
   */
  document.addEventListener('DOMContentLoaded', async function () {
    // Sort alerts by data-sort attribute
    sortAlertsByDataSort();

    const nextTripContainer = document.getElementById('trip-name');
    const routeContainer = document.getElementById('route-name');
    const departsContainer = document.getElementById('departs');
    const futureContainer = document.getElementById('future');

    const nextTrip = findNextTrip(TRIPS);
    const nextRoute = ROUTES.find((r) => r.route_gid === nextTrip?.route_gid) || {};
    if (!nextTrip) {
      nextTripContainer.innerHTML = 'No more trips for today';
      routeContainer.innerHTML = '';
      departsContainer.innerHTML = '';
      return;
    }
    const scheduledStopTime = findNextDepartureTime(nextTrip.stop_times);
    const updatedStopTime = findUpdatedNextDepartureTime(nextTrip, STOP, TRIP_UPDATES);

    nextTripContainer.innerHTML = nextTrip.trip_headsign || 'No more trips for today';
    routeContainer.innerHTML = `${nextRoute.route_short_name || ''} - ${nextRoute.route_long_name || ''}`;

    // Use updated time if available, otherwise fall back to scheduled time
    const displayTime = updatedStopTime || scheduledStopTime;
    departsContainer.innerHTML = `
      <div>${formatTime(displayTime)}</div>
      <div class="label label--small">In ${getTimeUntil(displayTime)}${updatedStopTime ? ` (${formatDelay(scheduledStopTime, updatedStopTime)})` : ''}</div>
    `;

    // Show next two upcoming departures after the current next trip
    const upcoming = getUpcomingDeparturesForStop(TRIPS, STOP, TRIP_UPDATES, nextTrip.trip_gid, 2);
    if (upcoming.length > 0 && futureContainer) {
      futureContainer.innerHTML = `
        <div class="item">
          <div class="meta"></div>
          <div class="content">
            <div class="label label--small">Future Trips</div>
            ${upcoming.map((dep) => formatFutureTrip(dep)).join('')}
          </div>
        </div>`;
    }

    // Process and display only one alert
    processAlerts(ALERTS, nextRoute.route_gid, STOP.stop_gid);

    const mapContainer = document.getElementById('wego-map-canvas');
    if (mapContainer) {
      // Remove any previous map instance
      if (window.transitMap && window.transitMap.remove) {
        window.transitMap.remove();
      }
      window.transitMap = L.map('wego-map-canvas', {
        center: [36.1627, -86.7816], // Nashville
        zoom: 12,
        zoomControl: false,
        attributionControl: false
      });

      // Nicer map if API key provided
      if (THUNDERFOREST_API_KEY && !THUNDERFOREST_API_KEY?.includes('THUNDERFOREST_API_KEY')) {
        L.tileLayer('https://{s}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}{r}.png?apikey={apikey}', {
            attribution: '&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            apikey: THUNDERFOREST_API_KEY,
            maxZoom: 19
          }).addTo(window.transitMap);
      } else {
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
	          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19,
            ext: 'png',
          }).addTo(window.transitMap);
      }

      // Add trip route to map
      const routeShapeOutline = createRouteLine(nextTrip.shape, `#ffffff`, 16);
      const routeShape = createRouteLine(nextTrip.shape, `#${nextRoute.route_color}`, 8);
      routeShapeOutline.addTo(window.transitMap);
      routeShape.addTo(window.transitMap);
      window.transitMap.fitBounds(routeShape.getBounds());

      // Add stop marker to map
      L.circleMarker([parseFloat(STOP.stop_lat), parseFloat(STOP.stop_lon)], {
          radius: 8,
          color: '#fff',
          weight: 3,
          fillColor: '#000',
          fillOpacity: 1
      }).addTo(window.transitMap);

      // Add vehicle marker to map, if found
      const vehicle = VEHICLE_POSITIONS.find((vp) => vp.vehicle?.trip?.trip_id === nextTrip.trip_gid);
      if (vehicle) {
        L.marker([parseFloat(vehicle.vehicle.position.latitude), parseFloat(vehicle.vehicle.position.longitude)], {
            icon: L.icon({
                iconUrl: BUS_MARKER_IMAGE,
                iconSize: [20, 20],
                iconAnchor: [10, 10],
            }),
            zIndexOffset: 1000
        }).addTo(window.transitMap);
      }

    }
  });
</script>

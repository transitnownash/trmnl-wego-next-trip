{% comment %} https://gtfs.transitnownash.org/stops/{{ stop_id }}.json {% endcomment %}
{% assign stop = IDX_0 %}
{% comment %} https://gtfs.transitnownash.org/stops/{{ stop_id }}/trips.json?per_page=200 {% endcomment %}
{% assign trips = IDX_1.data %}
{% comment %} https://gtfs.transitnownash.org/routes.json {% endcomment %}
{% assign routes = IDX_2.data %}
{% comment %} https://gtfs.transitnownash.org/realtime/vehicle_positions.json {% endcomment %}
{% assign vehicle_positions = IDX_3.data %}
{% comment %} https://gtfs.transitnownash.org/realtime/trip_updates.json {% endcomment %}
{% assign trip_updates = IDX_4.data %}
{% comment %} https://gtfs.transitnownash.org/realtime/alerts.json {% endcomment %}
{% assign alerts = IDX_5.data %}

{% assign now = 'now' | date: '%s' | plus: trmnl.user.utc_offset %}
{% assign next_trip_index = nil %}
{% assign next_trip = nil %}
{% assign soonest_time_seconds = nil %}

{% for trip in trips %}
  {% if trip.stop_times.size > 0 %}
    {% assign departure_time_str = trip.stop_times.first.departure_time | strip %}

    {% comment %} Parse GTFS time format (HH:MM:SS, can be > 24:00:00) {% endcomment %}
    {% assign time_parts = departure_time_str | split: ':' %}
    {% assign hours = time_parts[0] | plus: 0 %}
    {% assign minutes = time_parts[1] | plus: 0 %}
    {% assign seconds = time_parts[2] | plus: 0 %}

    {% comment %} Handle times >= 24:00:00 (next day service) {% endcomment %}
    {% assign days_to_add = 0 %}
    {% if hours >= 24 %}
      {% assign days_to_add = hours | divided_by: 24 %}
      {% assign hours = hours | modulo: 24 %}
    {% endif %}

    {% comment %} Calculate total seconds from start of day {% endcomment %}
    {% assign hours_in_seconds = hours | times: 3600 %}
    {% assign minutes_in_seconds = minutes | times: 60 %}
    {% assign departure_seconds = hours_in_seconds | plus: minutes_in_seconds | plus: seconds %}
    {% assign current_hours_in_seconds = now | date: '%H' | times: 3600 %}
    {% assign current_minutes_in_seconds = now | date: '%M' | times: 60 %}
    {% assign current_seconds = now | date: '%S' | plus: 0 %}
    {% assign current_day_seconds = current_hours_in_seconds | plus: current_minutes_in_seconds | plus: current_seconds %}

    {% comment %} Adjust for next day if needed {% endcomment %}
    {% if days_to_add > 0 %}
      {% assign departure_seconds = departure_seconds | plus: days_to_add | times: 86400 %}
    {% endif %}

    {% comment %} Only consider future departures {% endcomment %}
    {% if departure_seconds > current_day_seconds or days_to_add > 0 %}
      {% if soonest_time_seconds == nil or departure_seconds < soonest_time_seconds %}
        {% assign soonest_time_seconds = departure_seconds %}
        {% assign next_trip_index = forloop.index0 %}
        {% assign next_trip = trip %}
      {% endif %}
    {% endif %}
  {% endif %}
{% endfor %}

{% comment %} Format GTFS time to readable format (HH:MM:SS to h:mm AM/PM) {% endcomment %}
{% if next_trip and next_trip.stop_times.size > 0 %}
  {% assign departure_time_str = next_trip.stop_times.first.departure_time | strip %}
  {% assign time_parts = departure_time_str | split: ':' %}
  {% assign hours = time_parts[0] | plus: 0 %}
  {% assign minutes = time_parts[1] | plus: 0 %}

  {% comment %} Handle times >= 24:00:00 (next day service) {% endcomment %}
  {% if hours >= 24 %}
    {% assign hours = hours | modulo: 24 %}
  {% endif %}

  {% comment %} Convert to 12-hour format {% endcomment %}
  {% assign am_pm = 'AM' %}
  {% if hours >= 12 %}
    {% assign am_pm = 'PM' %}
  {% endif %}
  {% if hours > 12 %}
    {% assign hours = hours | minus: 12 %}
  {% elsif hours == 0 %}
    {% assign hours = 12 %}
  {% endif %}

  {% assign formatted_departure_time = hours | append: ':' | append: time_parts[1] | append: ' ' | append: am_pm %}
{% endif %}

{% comment %} Calculate time until departure {% endcomment %}
{% if next_trip and next_trip.stop_times.size > 0 %}
  {% assign departure_time_str = next_trip.stop_times.first.departure_time | strip %}
  {% assign time_parts = departure_time_str | split: ':' %}
  {% assign dep_hours = time_parts[0] | plus: 0 %}
  {% assign dep_minutes = time_parts[1] | plus: 0 %}
  {% assign dep_seconds = time_parts[2] | plus: 0 %}

  {% comment %} Handle next day times {% endcomment %}
  {% assign days_to_add = 0 %}
  {% if dep_hours >= 24 %}
    {% assign days_to_add = dep_hours | divided_by: 24 %}
    {% assign dep_hours = dep_hours | modulo: 24 %}
  {% endif %}

  {% assign dep_hours_in_seconds = dep_hours | times: 3600 %}
  {% assign dep_minutes_in_seconds = dep_minutes | times: 60 %}
  {% assign departure_total_seconds = dep_hours_in_seconds | plus: dep_minutes_in_seconds | plus: dep_seconds %}
  {% assign current_hours_in_seconds = now | date: '%H' | times: 3600 %}
  {% assign current_minutes_in_seconds = now | date: '%M' | times: 60 %}
  {% assign current_seconds = now | date: '%S' | plus: 0 %}
  {% assign current_total_seconds = current_hours_in_seconds | plus: current_minutes_in_seconds | plus: current_seconds %}

  {% if days_to_add > 0 %}
    {% assign departure_total_seconds = departure_total_seconds | plus: days_to_add | times: 86400 %}
  {% endif %}

  {% assign seconds_until = departure_total_seconds | minus: current_total_seconds %}
  {% assign minutes_until = seconds_until | divided_by: 60 %}

  {% if minutes_until > 0 %}
    {% assign time_until_display = minutes_until | append: ' min' %}
  {% else %}
    {% assign time_until_display = seconds_until | append: ' sec' %}
  {% endif %}
{% endif %}

{% comment %} Find upcoming trips (next 2 after the current next trip) {% endcomment %}
{% assign upcoming_trips = '' %}
{% assign upcoming_count = 0 %}
{% for trip in trips %}
  {% if trip.stop_times.size > 0 and upcoming_count < 2 %}
    {% assign trip_departure_str = trip.stop_times.first.departure_time | strip %}
    {% assign trip_time_parts = trip_departure_str | split: ':' %}
    {% assign trip_hours = trip_time_parts[0] | plus: 0 %}
    {% assign trip_minutes = trip_time_parts[1] | plus: 0 %}
    {% assign trip_seconds = trip_time_parts[2] | plus: 0 %}

    {% assign trip_days_to_add = 0 %}
    {% if trip_hours >= 24 %}
      {% assign trip_days_to_add = trip_hours | divided_by: 24 %}
      {% assign trip_hours = trip_hours | modulo: 24 %}
    {% endif %}

    {% assign trip_hours_in_seconds = trip_hours | times: 3600 %}
    {% assign trip_minutes_in_seconds = trip_minutes | times: 60 %}
    {% assign trip_total_seconds = trip_hours_in_seconds | plus: trip_minutes_in_seconds | plus: trip_seconds %}
    {% if trip_days_to_add > 0 %}
      {% assign trip_total_seconds = trip_total_seconds | plus: trip_days_to_add | times: 86400 %}
    {% endif %}

    {% comment %} Only include future trips that are different from next_trip {% endcomment %}
    {% if trip_total_seconds > current_total_seconds or trip_days_to_add > 0 %}
      {% if trip.trip_gid != next_trip.trip_gid %}
        {% comment %} Format this trip's time {% endcomment %}
        {% assign trip_display_hours = trip_hours %}
        {% assign trip_am_pm = 'AM' %}
        {% if trip_hours >= 12 %}
          {% assign trip_am_pm = 'PM' %}
        {% endif %}
        {% if trip_hours > 12 %}
          {% assign trip_display_hours = trip_hours | minus: 12 %}
        {% elsif trip_hours == 0 %}
          {% assign trip_display_hours = 12 %}
        {% endif %}

        {% assign trip_formatted_time = trip_display_hours | append: ':' | append: trip_time_parts[1] | append: ' ' | append: trip_am_pm %}

        {% comment %} Find the route for this trip {% endcomment %}
        {% assign trip_route = routes | where: 'route_gid', trip.route_gid | first %}

        {% comment %} Build upcoming trips HTML using template approach {% endcomment %}
        {% assign trip_html = '<div class="label label--small py--1"><b>' | append: trip_formatted_time | append: '</b>: ' | append: trip_route.route_short_name | append: ' - ' | append: trip_route.route_long_name | append: '</div>' %}
        {% assign upcoming_trips = upcoming_trips | append: trip_html %}

        {% assign upcoming_count = upcoming_count | plus: 1 %}
      {% endif %}
    {% endif %}
  {% endif %}
{% endfor %}

{% comment %} Process alerts - find first relevant alert {% endcomment %}
{% assign relevant_alert = nil %}
{% if next_trip %}
  {% assign next_route = routes | where: 'route_gid', next_trip.route_gid | first %}
  {% for alert in alerts %}
    {% if alert.alert.informed_entity.size > 0 %}
      {% assign alert_applies = false %}
      {% for entity in alert.alert.informed_entity %}
        {% if entity.route_id == next_route.route_gid or entity.stop_id == stop.stop_gid %}
          {% assign alert_applies = true %}
          {% break %}
        {% endif %}
      {% endfor %}
      {% if alert_applies %}
        {% assign relevant_alert = alert %}
        {% break %}
      {% endif %}
    {% endif %}
  {% endfor %}
{% endif %}

{%- capture bus_svg %}
<svg width="100%" height="100%" viewBox="0 0 512 512" version="1.1" xmlns="http://www.w3.org/2000/svg" style="fill-rule:evenodd;clip-rule:evenodd;">
    <g transform="matrix(21.3333,0,0,21.3333,0,10.6667)">
        <path d="M4,16C4,16.88 4.39,17.67 5,18.22L5,20C5,20.55 5.45,21 6,21L7,21C7.55,21 8,20.55 8,20L8,19L16,19L16,20C16,20.55 16.45,21 17,21L18,21C18.55,21 19,20.55 19,20L19,18.22C19.61,17.67 20,16.88 20,16L20,6C20,2.5 16.42,2 12,2C7.58,2 4,2.5 4,6L4,16Z" style="fill:rgb(249,249,249);fill-rule:nonzero;stroke:white;stroke-width:3px;"/>
    </g>
    <g transform="matrix(21.3333,0,0,21.3333,0,10.6667)">
        <path d="M4,16C4,16.88 4.39,17.67 5,18.22L5,20C5,20.55 5.45,21 6,21L7,21C7.55,21 8,20.55 8,20L8,19L16,19L16,20C16,20.55 16.45,21 17,21L18,21C18.55,21 19,20.55 19,20L19,18.22C19.61,17.67 20,16.88 20,16L20,6C20,2.5 16.42,2 12,2C7.58,2 4,2.5 4,6L4,16ZM7.5,17C6.67,17 6,16.33 6,15.5C6,14.67 6.67,14 7.5,14C8.33,14 9,14.67 9,15.5C9,16.33 8.33,17 7.5,17ZM16.5,17C15.67,17 15,16.33 15,15.5C15,14.67 15.67,14 16.5,14C17.33,14 18,14.67 18,15.5C18,16.33 17.33,17 16.5,17ZM18,11L6,11L6,6L18,6L18,11Z" style="fill:rgb(128,0,128);fill-rule:nonzero;"/>
    </g>
    <g transform="matrix(21.3333,0,0,21.3333,0,0)">
        <g transform="matrix(1,0,0,1,0,0.5)">
            <rect x="9.609" y="12.157" width="1.364" height="1.378" style="fill:white;"/>
        </g>
        <g transform="matrix(1,0,0,1,0,0.5)">
            <rect x="11.442" y="12.157" width="1.364" height="1.378" style="fill:white;"/>
        </g>
        <g transform="matrix(1,0,0,1,0,0.5)">
            <rect x="13.246" y="12.157" width="1.364" height="1.378" style="fill:white;"/>
        </g>
        <g transform="matrix(1,0,0,1,0,0.5)">
            <circle cx="11.157" cy="14.613" r="0.741" style="fill:white;"/>
        </g>
        <g transform="matrix(1,0,0,1,0,0.5)">
            <circle cx="13.092" cy="14.613" r="0.741" style="fill:white;"/>
        </g>
    </g>
</svg>
{%- endcapture %}

{%- capture warning_svg %}
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
  <polygon points="10,2 19,18 1,18" fill="white" stroke="#222" stroke-width="1.5"/>
  <text x="10" y="15" text-anchor="middle" font-size="13" font-family="Arial, sans-serif" fill="#222" font-weight="bold">!</text>
</svg>
{% endcapture %}

{% template alert %}
<div class="item gap--small" data-sort="{{ alert.alert.informed_entity.first.route_id | default: 99999 }}">
  <div class="title text--white bg--black text--center w--10 flex--center-y">
    <span class="text--white">{{ alert.alert.informed_entity.first.route_id }}</span>
  </div>
  <div class="content">
    <div><span class="label label--small">{{ alert.alert.header_text.translation.first.text }}</span></div>
    <div class="flex gap--small">
      <span class="label label--small label--outline">{{ alert.alert.cause }}, {{ alert.alert.effect }}</span>
      {% if alert.alert.active_period.first.end < 32503701600 %}
      <span class="label label--small label--outline">{{ alert.alert.active_period.first.start | date: '%-m/%-d' }} thru {{ alert.alert.active_period.first.end | date: '%-m/%-d' }}</span>
      {% else %}
      <span class="label label--small label--outline">Start: {{ alert.alert.active_period.first.start | date: '%-m/%-d' }}</span>
      {% endif %}
      </span>
    </div>
  </div>
</div>
{% endtemplate %}

<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
  crossorigin="" />
<script
  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
  crossorigin=""></script>

<style>
  #wego-map-canvas {
    border-radius: 10px;
  }
  .leaflet-tile-loaded {
    opacity: 0.1;
    filter: grayscale(1.0);
  }
</style>

<script>
  const THUNDERFOREST_API_KEY = {{ trmnl.plugin_settings.custom_fields_values.thunderforest_api_key | json }};
  const BUS_MARKER_IMAGE = 'data:image/svg+xml;base64,{{ bus_svg | base64_encode }}';

  // Map data
  const STOP = {{ stop | json }};
  const VEHICLE_POSITIONS = {{ vehicle_positions | json }};

  // Pre-calculated trip data from Liquid
  const NEXT_TRIP = {{ next_trip | json }};
  {% if next_trip %}
    {% assign next_route = routes | where: 'route_gid', next_trip.route_gid | first %}
    const NEXT_ROUTE = {{ next_route | json }};
  {% else %}
    const NEXT_ROUTE = null;
  {% endif %}

  /**
   * Create Route Line
   */
  const createRouteLine = (shape, color, weight) => {
    if (!shape || !shape.points) return null;
    const formattedShapePoints = shape.points.map((s) => {
      return [s.lat, s.lon];
    });
    return L.polyline(formattedShapePoints, { smooth: true, color, weight });
  };

  /**
   * Initialize Map
   */
  document.addEventListener('DOMContentLoaded', function () {
    const mapContainer = document.getElementById('wego-map-canvas');
    if (!mapContainer || !NEXT_TRIP) return;

    // Remove any previous map instance
    if (window.transitMap && window.transitMap.remove) {
      window.transitMap.remove();
    }

    window.transitMap = L.map('wego-map-canvas', {
      center: [36.1627, -86.7816], // Nashville
      zoom: 12,
      zoomControl: false,
      attributionControl: false
    });

    // Add tile layer
    if (THUNDERFOREST_API_KEY && !THUNDERFOREST_API_KEY?.includes('THUNDERFOREST_API_KEY')) {
      L.tileLayer('https://{s}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}{r}.png?apikey={apikey}', {
          attribution: '&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          apikey: THUNDERFOREST_API_KEY,
          maxZoom: 19
        }).addTo(window.transitMap);
    } else {
      L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          maxZoom: 19,
          ext: 'png',
        }).addTo(window.transitMap);
    }

    // Add trip route to map
    if (NEXT_TRIP.shape && NEXT_ROUTE) {
      const routeShapeOutline = createRouteLine(NEXT_TRIP.shape, '#ffffff', 16);
      const routeShape = createRouteLine(NEXT_TRIP.shape, `#${NEXT_ROUTE.route_color}`, 8);
      if (routeShapeOutline) routeShapeOutline.addTo(window.transitMap);
      if (routeShape) {
        routeShape.addTo(window.transitMap);
        window.transitMap.fitBounds(routeShape.getBounds());
      }
    }

    // Add stop marker to map
    L.circleMarker([parseFloat(STOP.stop_lat), parseFloat(STOP.stop_lon)], {
        radius: 8,
        color: '#fff',
        weight: 3,
        fillColor: '#000',
        fillOpacity: 1
    }).addTo(window.transitMap);

    // Add vehicle marker to map, if found
    const vehicle = VEHICLE_POSITIONS.find((vp) => vp.vehicle?.trip?.trip_id === NEXT_TRIP.trip_gid);
    if (vehicle) {
      L.marker([parseFloat(vehicle.vehicle.position.latitude), parseFloat(vehicle.vehicle.position.longitude)], {
          icon: L.icon({
              iconUrl: BUS_MARKER_IMAGE,
              iconSize: [20, 20],
              iconAnchor: [10, 10],
          }),
          zIndexOffset: 1000
      }).addTo(window.transitMap);
    }
  });
</script>
